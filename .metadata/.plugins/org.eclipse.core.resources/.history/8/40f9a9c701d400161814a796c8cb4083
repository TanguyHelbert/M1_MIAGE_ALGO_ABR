package proj;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		ArbreBinaireRecherche abr1 = new ArbreBinaireRecherche();
//		
//		System.out.println("avant tostring");
//		
//		System.out.println(abr1.getRacine().toString());
//		
//		System.out.println("apres tostring");
//		
//		abr1.insere(3);
//		abr1.insere(4);
//		abr1.insere(2);
//		abr1.insere(5);
//		
//		System.out.println(abr1.getRacine().toString());
		
		TabABR listeABR = new TabABR();
		System.out.println("Creation du TABR par fichier :");
		listeABR.fichierABR("txt/test.txt");
		System.out.println("Lecture suffixe premier ABR :");
		System.out.println(listeABR.getTabr().get(0).getAbr().parcoursSuffixe());
//		listeABR.abrFichier("txt/testSauv.txt");
		System.out.println("Affichage :");
		listeABR.affichage();
//		System.out.println("Insertion dans TABR (hors interv) :");
//		System.out.println(listeABR.insertTABR(7));
//		System.out.println("Insertion dans TABR (existe) :");
//		System.out.println(listeABR.insertTABR(3));
//		System.out.println("Insertion dans TABR (vrai) :");
//		System.out.println(listeABR.insertTABR(79));
//		System.out.println("Affichage :");
//		listeABR.affichage();
//		System.out.println("Suppresion dans TABR (hors interv) :");
//		System.out.println(listeABR.supprTABR(7));
//		System.out.println("Suppression dans TABR (existe pas) :");
//		System.out.println(listeABR.supprTABR(79));
//		System.out.println("Suppression dans TABR (vrai) :");
//		System.out.println(listeABR.supprTABR(14));
//		System.out.println("Affichage :");
//		listeABR.affichage();
		System.out.println("Fusion de deux cases (hors interv)");
		System.out.println(listeABR.fusionCase(6));
		System.out.println("Fusion de deux cases (max)");
		System.out.println(listeABR.fusionCase(6));
		
//		listeABR = aleaTABR(10,80);
//		listeABR.affichage();
//		listeABR = aleaTABR(9,80);
//		listeABR.affichage();
	}
	
	/**
	 * aleaTABR permet de creer un TABR de n cases ou T[1].debut = 1 et T[n].fin = m chaque ABR contient au moins 3 elements
	 * @param n : nombre de cases du tableau
	 * @param m : valeur maximale contenu dans T[n].fin
	 * @return renvoit le TABR aleatoire
	 */
	public static TabABR aleaTABR(int n, int m){
		TabABR tabalea = new TabABR();	// TABR aleatoire
		Case c;
		int min = 1;					// Intervalle minimal
		int max = 0;					// Intervalle maximal
		int tailleInterv;				// Taille de l'intervalle
		
		tailleInterv = (int) Math.ceil((double)m/(double)n);
		
		System.out.println(m + " " +  n + " taille " + tailleInterv);
		
		for(int i = 0 ; i < n ; i++) {
			max += tailleInterv;
			c = new Case(min,max);
			tabalea.getTabr().add(c);
		}
		
		return tabalea;
	}

}

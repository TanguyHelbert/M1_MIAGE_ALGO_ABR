package proj;

import java.util.ArrayList;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		ArbreBinaireRecherche abr1 = new ArbreBinaireRecherche();
//		
//		System.out.println("avant tostring");
//		
//		System.out.println(abr1.getRacine().toString());
//		
//		System.out.println("apres tostring");
//		
//		abr1.insere(3);
//		abr1.insere(4);
//		abr1.insere(2);
//		abr1.insere(5);
//		
//		System.out.println(abr1.getRacine().toString());
		
		TabABR listeABR = new TabABR();
		System.out.println("Creation du TABR par fichier :");
		System.out.println(listeABR.fichierVersTABR("txt/test.txt"));
		System.out.println("Lecture suffixe premier ABR :");
		System.out.println(listeABR.getTabr().get(0).getAbr().parcoursSuffixe());
		System.out.println(listeABR.ABRversFichier("txt/testSauv.txt"));
		System.out.println("Affichage :");
		System.out.println(listeABR.affichage());
		System.out.println("Insertion dans TABR (hors interv) :");
		System.out.println(listeABR.insertTABR(7));
		System.out.println("Insertion dans TABR (existe) :");
		System.out.println(listeABR.insertTABR(3));
		System.out.println("Insertion dans TABR (vrai) :");
		System.out.println(listeABR.insertTABR(79));
		System.out.println("Affichage :");
		System.out.println(listeABR.affichage());
		System.out.println("Suppresion dans TABR (hors interv) :");
		System.out.println(listeABR.supprTABR(7));
		System.out.println("Suppression dans TABR (existe pas) :");
		System.out.println(listeABR.supprTABR(66));
		System.out.println("Suppression dans TABR (vrai) :");
		System.out.println(listeABR.supprTABR(14));
		System.out.println("Affichage :");
		System.out.println(listeABR.affichage());
		System.out.println("Fusion de deux cases (hors interv)");
		System.out.println(listeABR.fusionCase(6));
		System.out.println("Fusion de deux cases (max)");
		System.out.println(listeABR.fusionCase(3));
		System.out.println("Fusion de deux cases (vrai)");
		System.out.println(listeABR.fusionCase(1));
		System.out.println("Affichage :");
		System.out.println(listeABR.affichage());
		System.out.println("Equilibre correct");
		System.out.println(listeABR.estEquilibreProf(2));
		System.out.println("Equilibre incorrect");
		System.out.println(listeABR.estEquilibreProf(1));
		ArbreBinaireRecherche abr = new ArbreBinaireRecherche(13);
		abr.insere(16);abr.insere(10);abr.insere(5);abr.insere(24);abr.insere(20);		
		ArrayList<Integer> bornesB = new ArrayList<Integer>(){{add(1);add(17);add(9);add(15);add(-1);add(40);}};
		listeABR = new TabABR();
		System.out.println("Creation d'un TABR via un ABR");
		System.out.println(listeABR.ABRversTABR(abr,bornesB));
		System.out.println("Creation d'un ABR regroupant tout le TABR");
		System.out.println(listeABR.TABRversABR());
		System.out.println("");
		System.out.println(listeABR.aleaTABR(10,80));
		System.out.println(listeABR.affichage());
	}
	
	/**
	 * aleaTABR permet de creer un TABR de n cases ou T[1].debut = 1 et T[n].fin = m chaque ABR contient au moins 3 elements
	 * @param n : nombre de cases du tableau
	 * @param m : valeur maximale contenu dans T[n].fin
	 * @return renvoie le TABR aleatoire
	 */
	public static TabABR aleaTABR(int n, int m){
		
		TabABR tabalea = new TabABR();	// TABR aleatoire
		
		Case c;
		int min = 1;					// Intervalle minimal du TABR
		int max = m;					// Intervalle maximal du TABR
		int min_case = 0;				// Intervalle minimal de la case
		int max_case = 1;				// Intervalle maximal de la case
		int taille_interv_tabr;			// Taille de l'intervalle des cases du TABR
		int taille_interv_case = 0;		// Taille de l'intervalle de la case
		int min_interv;					// D�finition de l'intervalle minimal de la case
		int max_interv;					// D�finition de l'intervalle maximal de la case
		
		taille_interv_tabr = (int) Math.ceil((double)m/(double)n);
		
//		System.out.println("Nombre de cases � g�n�rer : " + n + " ; " + "Intervalle max : " +m);
//		System.out.println("Taille des intervalles � g�n�rer : " +taille_interv_tabr);
		
		min_interv = min;
		max_interv = taille_interv_tabr;
		
		for(int i = 0 ; i < n ; i++) {
			
			min_case = (int)(Math.random() * (max_interv-min_interv)) + min_interv;
			max_case = (int)(Math.random() * (max_interv-min_interv)) + min_interv;
			
			while(min_case > max_case || max_case < min_case || max_case - min_case < 3 || max_case - min_case > taille_interv_tabr || max_case > max || i >= n) {
				min_case = (int)(Math.random() * (max_interv-min_interv)) + min_interv;
				max_case = (int)(Math.random() * (max_interv-min_interv)) + min_interv;
			}
			
//			System.out.println("Iteration : " +i);
//			System.out.println("[min_case] : " +min_case+ " [max_case] : "+max_case + " // ");
			
			taille_interv_case = max_case - min_case;
					
			c = new Case(min_case, max_case);
			tabalea.getTabr().add(c);
			
			genererAleaABR(min_case, max_case, taille_interv_case);
			
			min_interv = max_case;
			max_interv += taille_interv_tabr;
		}
		
		return tabalea;
	}
	
	public static ArbreBinaireRecherche genererAleaABR(int min_abr, int max_abr, int taille_intervalle_abr) {
		
		int nb_elements;
		int min_nb_elements = 3;
		int valeur;
		int valeur_precedente = 0;
		
		ArbreBinaireRecherche abralea = new ArbreBinaireRecherche(); // ABR aleatoire
		
		nb_elements = (int)(Math.random() * (taille_intervalle_abr-min_nb_elements)) + min_nb_elements;

		for(int i = 0 ; i < nb_elements ; i++) {
			
			valeur = (int)(Math.random() * (max_abr-min_abr)) + min_abr;
			
			while(valeur < min_abr || valeur > max_abr || valeur == valeur_precedente || i >= nb_elements) {
				valeur = (int)(Math.random() * (max_abr-min_abr)) + min_abr;
			}
			valeur_precedente = valeur;
			
//			System.out.println(valeur);
			
			abralea.insere(valeur);
		}
		
		return null;
	}

}

package proj;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

public class TabABR {
	private ArrayList<Case> tabr;
	
	public TabABR() {
		this.tabr = new ArrayList<>();
	}
	
	public void fichierABR(String file){
		Case c;
		int precMax;
		String ligne = "";
		String[] interArbre;
		String inter = "";
		String[] valInter;
		String arbre = "";
		String[] valArbre;
		int maxBorne = 0;
		int indexCase = 0;
		
		try{
			// Parcours pour les intervalles
			InputStream ips=new FileInputStream(file); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
						
			while ((ligne=br.readLine())!=null){
				interArbre = ligne.split(";");	// Recuperation de la ligne de texte splitte
				inter = interArbre[0];			// Recuperation de la partie intervalle
				valInter = inter.split(":");	// Splitt de la liste d'intervalle par :
				c = new Case(Integer.parseInt(valInter[0]),Integer.parseInt(valInter[1]));
				if(this.tabr.size()==0){
					this.tabr.add(c);
				} else {
					precMax = this.tabr.get(this.tabr.size()-1).getFin();
					System.out.println("derniere val : " + precMax);
					// Verification de l'ordonnement croissant sur l'intervalle precedent
					if(precMax > c.getDebut())
						c.setDebut(++precMax);
					this.tabr.add(c);
				}
				for(int i = 0 ; i < this.tabr.size() ; i++){
					System.out.println("intervalles : " + this.tabr.get(i).getDebut() + " ; " + this.tabr.get(i).getFin());
				}
			}
			br.close(); 
			
			// Parcours pour les arbres
			ips=new FileInputStream(file); 
			ipsr=new InputStreamReader(ips);
			br=new BufferedReader(ipsr);
			
			indexCase = 0;
			while ((ligne=br.readLine())!=null){
				c = this.tabr.get(indexCase);
				interArbre = ligne.split(";");
				arbre = interArbre[1];
				valArbre = arbre.split(":");
				maxBorne = valArbre.length -1;
				for (int i = maxBorne ; i >= 0; i--){
					if(Integer.parseInt(valArbre[i]) >= c.getDebut() && Integer.parseInt(valArbre[i]) <= c.getFin())
						c.getAbr().insere(Integer.parseInt(valArbre[i]));
					else
						System.out.println("Nombre " + valArbre[i] + " n'appartient pas Ã  l'intervalle : [" + c.getDebut() + " ; " + c.getFin() + "]");
				} 
				System.out.println(c.getAbr().getRacine().toString());
				indexCase++;
			}
			br.close();
			
		} catch (Exception e){
			System.out.println(e.toString());
		}
	}
	
	public void abrFichier(String file){
		try{
			OutputStream ops=new FileOutputStream(file); 
			OutputStreamWriter opsw=new OutputStreamWriter(ops);
			String ligne = "";
			
			for(int i = 0 ; i < this.tabr.size() ; i++) {
				
				ligne = String.format(ligneFichier(i) + "%s",System.getProperty("line.separator"));
				opsw.write(ligne);
				opsw.flush();
			}
		} catch (Exception e){
			System.out.println(e.toString());
		}
	}
	
	public void affichage(){
		for(int i = 0 ; i < this.tabr.size() ; i++) {
			System.out.println(ligneFichier(i));
		}
	}
	
	public String ligneFichier(int i){
		String intervalle = "";
		String abr = "";
		
		intervalle = this.tabr.get(i).getDebut() + ":" + this.tabr.get(i).getFin();
		abr = this.tabr.get(i).getAbr().parcoursSuffixe();
		
		return intervalle + ";" + abr;
	}

	public ArrayList<Case> getTabr() {
		return tabr;
	}

	public void setTabr(ArrayList<Case> tabr) {
		this.tabr = tabr;
	}
	
	/**
	 * 2.2.1 : insertTABR insere l'element x dans le TABR si il correspond a l'intervalle
	 * si l'insertion est invalide un message d'erreur est renvoye
	 * @param x valeur a inserer dans le TABR
	 * @return message de retour
	 */
	public String insertTABR(int x){
		String result = "";						// message de retour
		ArbreBinaireRecherche abr;				// instance ABR du TABR
		int indice = this.appartientTABR(x);	// indice de l'ABR dans le TABR
		
		if(indice == -1){
			result = "L'element x n'est pas compris dans les intervalles du TABR - echec de l'insertion";
		} else {
			abr = this.tabr.get(indice).getAbr();
			if (abr.existe(x, abr.getRacine())){
				result = "L'element x existe deja dans le tableau";
			} else {
				abr.insere(x);
				result = "L'element x a ete insere dans le tableau";
			}
		}
		return result;
	}
	
	/**
	 * 2.2.1 : supprTABR supprime l'element x dans le TABR si il correspond a l'intervalle
	 * si la suppression est invalide un message d'erreur est renvoye
	 * @param x valeur a inserer dans le TABR
	 * @return message de retour
	 */
	public String supprTABR(int x){
		String result = "";						// message de retour
		ArbreBinaireRecherche abr;				// instance ABR du TABR
		int indice = this.appartientTABR(x);	// indice de l'ABR dans le TABR
		
		// Si l'element n'appartient pas aux intervalles du TABR on l'indique a l'utilisateur
		if(indice == -1){
			result = "L'element x n'est pas compris dans les intervalles du TABR - echec de la suppression";
		} else {
			abr = this.tabr.get(indice).getAbr();
			// Si l'element n'existe pas dans le tableau ==> message d'erreur
			if (!abr.existe(x, abr.getRacine())){
				result = "L'element x n'existe pas dans le tableau";
			// Sinon, on le supprime de son ABR
			} else {
				abr.supprime(x);
				result = "L'element x a ete supprime de l'ABR";
			}
		}
		return result;
	}
	
	/**
	 * Fonction privee permettant de verifier si un element appartient a un TABR
	 * @param x element a verifier
	 * @return indice de l'intervalle auquel appartient l'element (-1 s'il n'existe pas)
	 */
	private int appartientTABR(int x){
		int borne = this.tabr.size();	// borne de parcours du TABR 
		int i = 0;						// variable d'incrementation
		
		// Si x n'appartient pas a [T[0].debut ; T[n].fin] on renvoit directement -1 
		if (this.tabr.get(0).getDebut() > x || this.tabr.get((borne - 1)).getFin() < x){
			return -1;
		} else {
			// Parcours du TABR
			while (i < borne){
				// Si l'intervalle est trouve, on renvoit son indice dans le TABR
				if(this.tabr.get(i).getDebut() < x && this.tabr.get(i).getFin() > x)
					return i;
				i++;
			}
			// Sinon on renvoit -1
			return -1;
		}
	}
}

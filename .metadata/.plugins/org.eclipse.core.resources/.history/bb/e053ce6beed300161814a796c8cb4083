package proj;

public class ArbreBinaireRecherche{

	private NoeudBinaire racine;


	public ArbreBinaireRecherche(int e) {
		this.racine = new NoeudBinaire(e);
	}

	public ArbreBinaireRecherche() {
		this.racine = new NoeudBinaire();
	}

	public NoeudBinaire getRacine() {
		return racine;
	}

	public void setRacine(NoeudBinaire racine) {
		this.racine = racine;
	}

	public void insere(int elt) {
		if (elt < 0)
			throw new IllegalArgumentException("Un ABR ne contient que des elements positifs");

		if (racine.getValeur() == -1)
			racine = new NoeudBinaire (elt);
		else
			insereRecursif(elt, racine);
	}

	/**
	 * Insere un element a� partir d'un noeud.
	 * Si l'element est inferieur� la valeur du noeud, il est insere dans l'arborescence
	 * du sous-noeud gauche, sinon il est insere a�partir du sous-noeud droit.
	 * Pre-condition : le noeud n'est pas null.
	 * @param elt E l'element à inserer
	 * @param n Noeud le noeud dans l'arborescence duquel elt sera insere.
	 */
	private void insereRecursif(int elt, NoeudBinaire n) {
		if (n.getValeur() < elt){
			if (n.getNd() == null)
				n.setNd(new NoeudBinaire (elt));
			else
				insereRecursif(elt, n.getNd());
		} else {
			if (n.getNg() == null)
				n.setNg(new NoeudBinaire (elt));
			else
				insereRecursif(elt, n.getNg());
		}
	}

	public String parcoursSuffixe() {
		String result = "";
		if(this.getRacine().getValeur() != -1) {
			result = suffixeRecursif(this.getRacine());
			result = result.substring(0,(result.length()-1));
		}
		return result;
	}

	public String suffixeRecursif(NoeudBinaire nb) {
		if(!nb.estVide()){
			if(nb.getNg() != null & nb.getNd() != null){
				return suffixeRecursif(nb.getNg()) + suffixeRecursif(nb.getNd()) + nb.getValeur() + ":"; 
			} else if(nb.getNg() != null) {
				return suffixeRecursif(nb.getNg()) + nb.getValeur() + ":"; 
			} else if(nb.getNd() != null) {
				return suffixeRecursif(nb.getNd()) + nb.getValeur() + ":"; 
			} else {
				return nb.getValeur() + ":";
			}
		} else {
			return "";
		}
	}
		
	public Boolean existe(int x, NoeudBinaire nb){
		if(!nb.estVide()){
			if (x < nb.getValeur()){
				if(nb.getNg() != null) {
					return existe(x, nb.getNg());
				} else {
					return false;
				}
			} else if ( x > nb.getValeur()) {
				if(nb.getNd() != null) {
					return existe(x, nb.getNd());
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return true;
		}
	}

}
